// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet.proto

#ifndef PROTOBUF_wallet_2eproto__INCLUDED
#define PROTOBUF_wallet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Research {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_wallet_2eproto();
void protobuf_AssignDesc_wallet_2eproto();
void protobuf_ShutdownFile_wallet_2eproto();

class Wallet;
class Wallet_Card;

enum Wallet_CardType {
  Wallet_CardType_Debit = 0,
  Wallet_CardType_Credit = 1,
  Wallet_CardType_Store = 2,
  Wallet_CardType_Wallet_CardType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Wallet_CardType_Wallet_CardType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Wallet_CardType_IsValid(int value);
const Wallet_CardType Wallet_CardType_CardType_MIN = Wallet_CardType_Debit;
const Wallet_CardType Wallet_CardType_CardType_MAX = Wallet_CardType_Store;
const int Wallet_CardType_CardType_ARRAYSIZE = Wallet_CardType_CardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Wallet_CardType_descriptor();
inline const ::std::string& Wallet_CardType_Name(Wallet_CardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Wallet_CardType_descriptor(), value);
}
inline bool Wallet_CardType_Parse(
    const ::std::string& name, Wallet_CardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Wallet_CardType>(
    Wallet_CardType_descriptor(), name, value);
}
// ===================================================================

class Wallet_Card : public ::google::protobuf::Message {
 public:
  Wallet_Card();
  virtual ~Wallet_Card();

  Wallet_Card(const Wallet_Card& from);

  inline Wallet_Card& operator=(const Wallet_Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wallet_Card& default_instance();

  void Swap(Wallet_Card* other);

  // implements Message ----------------------------------------------

  inline Wallet_Card* New() const { return New(NULL); }

  Wallet_Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wallet_Card& from);
  void MergeFrom(const Wallet_Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wallet_Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Research.ProtoBuf.Wallet.CardType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Research::ProtoBuf::Wallet_CardType type() const;
  void set_type(::Research::ProtoBuf::Wallet_CardType value);

  // optional string vendor = 2;
  void clear_vendor();
  static const int kVendorFieldNumber = 2;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional string number = 3;
  void clear_number();
  static const int kNumberFieldNumber = 3;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional string expiry = 4;
  void clear_expiry();
  static const int kExpiryFieldNumber = 4;
  const ::std::string& expiry() const;
  void set_expiry(const ::std::string& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  ::std::string* mutable_expiry();
  ::std::string* release_expiry();
  void set_allocated_expiry(::std::string* expiry);

  // @@protoc_insertion_point(class_scope:Research.ProtoBuf.Wallet.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr expiry_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_wallet_2eproto();
  friend void protobuf_AssignDesc_wallet_2eproto();
  friend void protobuf_ShutdownFile_wallet_2eproto();

  void InitAsDefaultInstance();
  static Wallet_Card* default_instance_;
};
// -------------------------------------------------------------------

class Wallet : public ::google::protobuf::Message {
 public:
  Wallet();
  virtual ~Wallet();

  Wallet(const Wallet& from);

  inline Wallet& operator=(const Wallet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wallet& default_instance();

  void Swap(Wallet* other);

  // implements Message ----------------------------------------------

  inline Wallet* New() const { return New(NULL); }

  Wallet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wallet& from);
  void MergeFrom(const Wallet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wallet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Wallet_Card Card;

  typedef Wallet_CardType CardType;
  static const CardType Debit = Wallet_CardType_Debit;
  static const CardType Credit = Wallet_CardType_Credit;
  static const CardType Store = Wallet_CardType_Store;
  static inline bool CardType_IsValid(int value) {
    return Wallet_CardType_IsValid(value);
  }
  static const CardType CardType_MIN =
    Wallet_CardType_CardType_MIN;
  static const CardType CardType_MAX =
    Wallet_CardType_CardType_MAX;
  static const int CardType_ARRAYSIZE =
    Wallet_CardType_CardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CardType_descriptor() {
    return Wallet_CardType_descriptor();
  }
  static inline const ::std::string& CardType_Name(CardType value) {
    return Wallet_CardType_Name(value);
  }
  static inline bool CardType_Parse(const ::std::string& name,
      CardType* value) {
    return Wallet_CardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Research.ProtoBuf.Wallet.Card cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  const ::Research::ProtoBuf::Wallet_Card& cards(int index) const;
  ::Research::ProtoBuf::Wallet_Card* mutable_cards(int index);
  ::Research::ProtoBuf::Wallet_Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::Research::ProtoBuf::Wallet_Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::Research::ProtoBuf::Wallet_Card >&
      cards() const;

  // optional int32 cash = 2;
  void clear_cash();
  static const int kCashFieldNumber = 2;
  ::google::protobuf::int32 cash() const;
  void set_cash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Research.ProtoBuf.Wallet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Research::ProtoBuf::Wallet_Card > cards_;
  ::google::protobuf::int32 cash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_wallet_2eproto();
  friend void protobuf_AssignDesc_wallet_2eproto();
  friend void protobuf_ShutdownFile_wallet_2eproto();

  void InitAsDefaultInstance();
  static Wallet* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Wallet_Card

// optional .Research.ProtoBuf.Wallet.CardType type = 1;
inline void Wallet_Card::clear_type() {
  type_ = 0;
}
inline ::Research::ProtoBuf::Wallet_CardType Wallet_Card::type() const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.Card.type)
  return static_cast< ::Research::ProtoBuf::Wallet_CardType >(type_);
}
inline void Wallet_Card::set_type(::Research::ProtoBuf::Wallet_CardType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Research.ProtoBuf.Wallet.Card.type)
}

// optional string vendor = 2;
inline void Wallet_Card::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wallet_Card::vendor() const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.Card.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Research.ProtoBuf.Wallet.Card.vendor)
}
inline void Wallet_Card::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Research.ProtoBuf.Wallet.Card.vendor)
}
inline void Wallet_Card::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Research.ProtoBuf.Wallet.Card.vendor)
}
inline ::std::string* Wallet_Card::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:Research.ProtoBuf.Wallet.Card.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wallet_Card::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:Research.ProtoBuf.Wallet.Card.vendor)
}

// optional string number = 3;
inline void Wallet_Card::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wallet_Card::number() const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.Card.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Research.ProtoBuf.Wallet.Card.number)
}
inline void Wallet_Card::set_number(const char* value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Research.ProtoBuf.Wallet.Card.number)
}
inline void Wallet_Card::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Research.ProtoBuf.Wallet.Card.number)
}
inline ::std::string* Wallet_Card::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:Research.ProtoBuf.Wallet.Card.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wallet_Card::release_number() {
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:Research.ProtoBuf.Wallet.Card.number)
}

// optional string expiry = 4;
inline void Wallet_Card::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wallet_Card::expiry() const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.Card.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_expiry(const ::std::string& value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Research.ProtoBuf.Wallet.Card.expiry)
}
inline void Wallet_Card::set_expiry(const char* value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Research.ProtoBuf.Wallet.Card.expiry)
}
inline void Wallet_Card::set_expiry(const char* value, size_t size) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Research.ProtoBuf.Wallet.Card.expiry)
}
inline ::std::string* Wallet_Card::mutable_expiry() {
  
  // @@protoc_insertion_point(field_mutable:Research.ProtoBuf.Wallet.Card.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wallet_Card::release_expiry() {
  
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wallet_Card::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    
  } else {
    
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:Research.ProtoBuf.Wallet.Card.expiry)
}

// -------------------------------------------------------------------

// Wallet

// repeated .Research.ProtoBuf.Wallet.Card cards = 1;
inline int Wallet::cards_size() const {
  return cards_.size();
}
inline void Wallet::clear_cards() {
  cards_.Clear();
}
inline const ::Research::ProtoBuf::Wallet_Card& Wallet::cards(int index) const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.cards)
  return cards_.Get(index);
}
inline ::Research::ProtoBuf::Wallet_Card* Wallet::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Research.ProtoBuf.Wallet.cards)
  return cards_.Mutable(index);
}
inline ::Research::ProtoBuf::Wallet_Card* Wallet::add_cards() {
  // @@protoc_insertion_point(field_add:Research.ProtoBuf.Wallet.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Research::ProtoBuf::Wallet_Card >*
Wallet::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:Research.ProtoBuf.Wallet.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Research::ProtoBuf::Wallet_Card >&
Wallet::cards() const {
  // @@protoc_insertion_point(field_list:Research.ProtoBuf.Wallet.cards)
  return cards_;
}

// optional int32 cash = 2;
inline void Wallet::clear_cash() {
  cash_ = 0;
}
inline ::google::protobuf::int32 Wallet::cash() const {
  // @@protoc_insertion_point(field_get:Research.ProtoBuf.Wallet.cash)
  return cash_;
}
inline void Wallet::set_cash(::google::protobuf::int32 value) {
  
  cash_ = value;
  // @@protoc_insertion_point(field_set:Research.ProtoBuf.Wallet.cash)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace Research

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Research::ProtoBuf::Wallet_CardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Research::ProtoBuf::Wallet_CardType>() {
  return ::Research::ProtoBuf::Wallet_CardType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wallet_2eproto__INCLUDED
